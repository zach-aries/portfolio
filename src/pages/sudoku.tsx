import { useState, useMemo, MouseEvent } from "react";
import Head from "next/head";
import { classes } from "typestyle";

import { newStartingBoard, safeToPlace } from "@/helpers/sudoku";
import styles from "@/styles/sudoku.styles";
import generalStyles from "@/styles/general.styles";
import Navigation from "@/components/molecules/Navigation";

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

interface NumberSelectorProps {
  position?: {
    rowIndex: number;
    colIndex: number;
  };
  onClick: (
    target: { rowIndex: number; colIndex: number },
    number: number
  ) => void;
}

function NumberSelector(props: NumberSelectorProps) {
  const { position, onClick } = props;

  const handleClick = (number: number) => {
    if (!position) {
      return;
    }
    const target = { rowIndex: position.rowIndex, colIndex: position.colIndex };
    onClick(target, number);
  };

  return (
    <ul className={styles.numberSelector}>
      {numbers.map((number) => (
        <li
          key={`number-selector-${number}`}
          className={styles.numberButton}
          onClick={() => handleClick(number)}
        >
          {number === 0 ? "Clear" : number}
        </li>
      ))}
    </ul>
  );
}

interface CellProps {
  cell: GridCell;
  grid: number[][];
  position: { rowIndex: number; colIndex: number };
  hightlight: boolean;
  isSelected: boolean;
  onClick: (event: MouseEvent) => void;
}

function Cell(props: CellProps) {
  const { cell, grid, position, hightlight, isSelected, onClick } = props;

  const safe = safeToPlace(grid, position, cell.value);

  return (
    <div
      className={classes(
        styles.cell,
        cell.type === "static" && styles.cellStatic,
        cell.type === "dynamic" && styles.cellHover,
        hightlight && styles.cellHightlight,
        isSelected && styles.cellSelected,
        !safe && styles.cellNotSafe
      )}
      onClick={onClick}
    >
      {cell.value === 0 ? " " : cell.value}
    </div>
  );
}

type GridCell = { type: "static" | "dynamic"; value: number; safe: boolean };
type Grid = GridCell[][];

interface Props {
  startingGrid: Grid;
}

export default function Sudoku(props: Props) {
  const { startingGrid } = props;
  const [grid, setGrid] = useState<Grid>(startingGrid);

  const [selectorPosition, setSelectorPosition] = useState<
    | {
        rowIndex: number;
        colIndex: number;
      }
    | undefined
  >();

  const handleSelector = (
    event: MouseEvent,
    cell: { type: "static" | "dynamic"; value: number },
    target: { rowIndex: number; colIndex: number }
  ) => {
    if (cell.type === "static") {
      return;
    }

    event.stopPropagation();

    const { rowIndex, colIndex } = target;
    setSelectorPosition({ rowIndex, colIndex });
  };

  const handleSelectorClick = (
    target: { rowIndex: number; colIndex: number },
    value: number
  ) => {
    const { rowIndex, colIndex } = target;

    const newGrid = [...grid];
    newGrid[rowIndex][colIndex] = {
      type: grid[rowIndex][colIndex].type,
      value,
      safe: true,
    };

    setGrid(newGrid);
  };

  const checkGrid = useMemo(
    () => grid.map((row) => row.map((cell) => cell.value)),
    [grid]
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/portfolio/favicon.ico" />
      </Head>
      <Navigation />
      <main className={classes(generalStyles.main, styles.container)}>
        <NumberSelector
          position={selectorPosition}
          onClick={handleSelectorClick}
        />

        <div>
          {grid.map((row, rowIndex) => (
            <div key={`row-${rowIndex}`} className={styles.row}>
              {row.map((cell, colIndex) => (
                <Cell
                  key={`cell-${rowIndex}-${colIndex}`}
                  cell={cell}
                  grid={checkGrid}
                  hightlight={
                    rowIndex === selectorPosition?.rowIndex ||
                    colIndex === selectorPosition?.colIndex
                  }
                  isSelected={
                    rowIndex === selectorPosition?.rowIndex &&
                    colIndex === selectorPosition?.colIndex
                  }
                  position={{ rowIndex, colIndex }}
                  onClick={(event) =>
                    handleSelector(event, cell, { rowIndex, colIndex })
                  }
                />
              ))}
            </div>
          ))}
        </div>
      </main>
    </>
  );
}

/**
 * Difficulty:
 * Easy: 36-46
 * Medium: 32-35
 * Difficult: 28-31
 * Evil 17-27
 */
export async function getStaticProps() {
  const startingGrid: Grid = newStartingBoard(81 - 37).map((row) =>
    row.map((value) =>
      value === 0
        ? { type: "dynamic", value, safe: true }
        : { type: "static", value, safe: true }
    )
  );

  return {
    props: { startingGrid }, // will be passed to the page component as props
  };
}
